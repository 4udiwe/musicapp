// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/genres/contracts.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/genres/contracts.go -destination=internal/mocks/mock_genres/mock_repository.go
//

// Package mock_genres is a generated GoMock package.
package mock_genres

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/musicshop/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockGenreRepository is a mock of GenreRepository interface.
type MockGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepositoryMockRecorder
	isgomock struct{}
}

// MockGenreRepositoryMockRecorder is the mock recorder for MockGenreRepository.
type MockGenreRepositoryMockRecorder struct {
	mock *MockGenreRepository
}

// NewMockGenreRepository creates a new mock instance.
func NewMockGenreRepository(ctrl *gomock.Controller) *MockGenreRepository {
	mock := &MockGenreRepository{ctrl: ctrl}
	mock.recorder = &MockGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreRepository) EXPECT() *MockGenreRepositoryMockRecorder {
	return m.recorder
}

// AddGenreToAlbum mocks base method.
func (m *MockGenreRepository) AddGenreToAlbum(ctx context.Context, albumID, genreID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGenreToAlbum", ctx, albumID, genreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGenreToAlbum indicates an expected call of AddGenreToAlbum.
func (mr *MockGenreRepositoryMockRecorder) AddGenreToAlbum(ctx, albumID, genreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenreToAlbum", reflect.TypeOf((*MockGenreRepository)(nil).AddGenreToAlbum), ctx, albumID, genreID)
}

// Create mocks base method.
func (m *MockGenreRepository) Create(ctx context.Context, genre entity.Genre) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, genre)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGenreRepositoryMockRecorder) Create(ctx, genre any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGenreRepository)(nil).Create), ctx, genre)
}

// Delete mocks base method.
func (m *MockGenreRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGenreRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGenreRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockGenreRepository) FindAll(ctx context.Context) ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGenreRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGenreRepository)(nil).FindAll), ctx)
}
